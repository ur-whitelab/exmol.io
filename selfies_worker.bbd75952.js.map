{"mappings":"0xCAAAA,cAAc,4DAEd,IAEMC,EAAK,IAAIC,iBAAiB,mBAE1BC,EAAa,CACfC,QAAS,SAAAC,GAAO,OAAO,MACvBC,QAAS,SAAAD,GAAO,OAAO,MACvBE,cAAe,UACfC,cAAe,WAGnBC,QAAQC,IAAI,0BACZV,cAAc,4DAEdW,YAAY,CAAEC,SAAU,mDAAoDC,MAAK,SAACC,GAC9EX,EAAWI,cAAgB,SAC3BO,EAAQC,YAAY,YAAYF,MAAK,WACjCC,EAAQE,eAAgB,+EAE8BC,OAnBvC,EAmBuC,mEAEnD,SAACC,GACAf,EAAWI,cAAgB,SAC3BJ,EAAWK,cAAgB,YAC5BK,MAAK,WACJV,EAAWK,cAAgB,SAC3B,IAAMJ,EAAUU,EAAQK,QAAQC,IAAI,WACpCjB,EAAWC,QAAU,SAACiB,GAClB,IAEI,OADajB,EAAQiB,GAEvB,MAAOC,GAEL,OADAb,QAAQC,IAAIY,GACL,OAGf,IAAMhB,EAAUQ,EAAQK,QAAQC,IAAI,WACpCjB,EAAWG,QAAU,SAACe,GAClB,IAEI,OADaf,EAAQe,GAEvB,MAAOC,GAEL,OADAb,QAAQC,IAAIY,GACL,OAGfb,QAAQC,IAAI,wBAEjB,SAACQ,GACAf,EAAWK,cAAgB,eAInCP,EAAGsB,UAAY,SAACD,GACZ,IAAME,EAAOF,EAAEE,KACTC,EAAQD,EAAK,GACbE,EAAMF,EAAK,GACbG,EAAS,GACC,mBAAVF,EACAE,EAAS,CAAEC,QAASzB,EAAWI,cAAec,QAASlB,EAAWK,eACjD,YAAViB,EACPE,EAASxB,EAAWG,QAAQkB,EAAK,IAChB,YAAVC,IACPE,EAASxB,EAAWC,QAAQoB,EAAK,KAErCvB,EAAG4B,YAAY,CAACJ,EAAOC,EAAKC","sources":["src/components/lib/selfies/selfies_worker.js"],"sourcesContent":["importScripts('https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js');\n\nconst selfiesVersion = 2.0;\nlet pyodide = null;\nconst bc = new BroadcastChannel('selfies_channel');\n// make fake function to start with\nconst selfiesMod = {\n    decoder: s => { return null },\n    encoder: s => { return null },\n    pyodideLoaded: 'loading',\n    selfiesLoaded: 'loading'\n};\n\nconsole.log('SELFIE WORKER: Started')\nimportScripts('https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js')\n\nloadPyodide({ indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\" }).then((pyodide) => {\n    selfiesMod.pyodideLoaded = 'loaded';\n    pyodide.loadPackage('micropip').then(() => {\n        pyodide.runPythonAsync(`\n            import micropip\n            await micropip.install('selfies==${selfiesVersion}')\n            from selfies import encoder, decoder\n        `, (err) => {\n            selfiesMod.pyodideLoaded = 'failed';\n            selfiesMod.selfiesLoaded = 'failed';\n        }).then(() => {\n            selfiesMod.selfiesLoaded = 'loaded'\n            const decoder = pyodide.globals.get('decoder');\n            selfiesMod.decoder = (selfies) => {\n                try {\n                    let result = decoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n            const encoder = pyodide.globals.get('encoder');\n            selfiesMod.encoder = (selfies) => {\n                try {\n                    let result = encoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n            console.log('Loaded selfies')\n        });\n    }, (err) => {\n        selfiesMod.selfiesLoaded = 'failed';\n    })\n});\n\nbc.onmessage = (e) => {\n    const data = e.data;\n    const mtype = data[0];\n    const mid = data[1];\n    let result = '';\n    if (mtype === 'loading-status') {\n        result = { pyodide: selfiesMod.pyodideLoaded, selfies: selfiesMod.selfiesLoaded };\n    } else if (mtype === 'encoder') {\n        result = selfiesMod.encoder(data[2]);\n    } else if (mtype === 'decoder') {\n        result = selfiesMod.decoder(data[2]);\n    }\n    bc.postMessage([mtype, mid, result]);\n}\n"],"names":["importScripts","bc","BroadcastChannel","selfiesMod","decoder","s","encoder","pyodideLoaded","selfiesLoaded","console","log","loadPyodide","indexURL","then","pyodide1","loadPackage","runPythonAsync","concat","err","globals","get","selfies","e","onmessage","data","mtype","mid","result","pyodide","postMessage"],"version":3,"file":"selfies_worker.bbd75952.js.map"}