{"mappings":"0xCAAAA,cAAc,4DAEd,IAGMC,EAAa,CACfC,QAAS,SAAAC,GAAO,OAAO,MACvBC,QAAS,SAAAD,GAAO,OAAO,MACvBE,cAAe,UACfC,cAAe,WAGnBC,UAAY,SAACC,GACT,IAAMC,EAAOD,EAAEC,KACTC,EAAQD,EAAK,GACbE,EAAMF,EAAK,GACbG,EAAS,GACC,mBAAVF,EACAE,EAAS,CAAEC,QAASZ,EAAWI,cAAeS,QAASb,EAAWK,eACjD,YAAVI,EACPE,EAASX,EAAWG,QAAQK,EAAK,IAChB,YAAVC,IACPE,EAASX,EAAWC,QAAQO,EAAK,KAErCM,YAAY,CAACL,EAAOC,EAAKC,KAI7BI,QAAQC,IAAI,0BACZjB,cAAc,4DAEdkB,YAAY,CAAEC,SAAU,mDAAoDC,MAAK,SAACC,GAC9EpB,EAAWI,cAAgB,SAC3BgB,EAAQC,YAAY,YAAYF,MAAK,WACjCC,EAAQE,eAAgB,+EAE8BC,OAlCvC,EAkCuC,mEAEnD,SAACC,GACAxB,EAAWI,cAAgB,SAC3BJ,EAAWK,cAAgB,YAC5Bc,MAAK,WACJnB,EAAWK,cAAgB,SAC3B,IAAMJ,EAAUmB,EAAQK,QAAQC,IAAI,WACpC1B,EAAWC,QAAU,SAACY,GAClB,IAEI,OADaZ,EAAQY,GAEvB,MAAON,GAEL,OADAQ,QAAQC,IAAIT,GACL,OAGf,IAAMJ,EAAUiB,EAAQK,QAAQC,IAAI,WACpC1B,EAAWG,QAAU,SAACU,GAClB,IAEI,OADaV,EAAQU,GAEvB,MAAON,GAEL,OADAQ,QAAQC,IAAIT,GACL,OAGfQ,QAAQC,IAAI,wBAEjB,SAACQ,GACAxB,EAAWK,cAAgB","sources":["src/components/lib/selfies/selfies_worker.js"],"sourcesContent":["importScripts('https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js');\n\nconst selfiesVersion = 2.0;\nlet pyodide = null;\n// make fake function to start with\nconst selfiesMod = {\n    decoder: s => { return null },\n    encoder: s => { return null },\n    pyodideLoaded: 'loading',\n    selfiesLoaded: 'loading'\n};\n\nonmessage = (e) => {\n    const data = e.data;\n    const mtype = data[0];\n    const mid = data[1];\n    let result = '';\n    if (mtype === 'loading-status') {\n        result = { pyodide: selfiesMod.pyodideLoaded, selfies: selfiesMod.selfiesLoaded };\n    } else if (mtype === 'encoder') {\n        result = selfiesMod.encoder(data[2]);\n    } else if (mtype === 'decoder') {\n        result = selfiesMod.decoder(data[2]);\n    }\n    postMessage([mtype, mid, result]);\n}\n\n\nconsole.log('SELFIE WORKER: Started')\nimportScripts('https://cdn.jsdelivr.net/pyodide/v0.18.1/full/pyodide.js')\n\nloadPyodide({ indexURL: \"https://cdn.jsdelivr.net/pyodide/v0.18.1/full/\" }).then((pyodide) => {\n    selfiesMod.pyodideLoaded = 'loaded';\n    pyodide.loadPackage('micropip').then(() => {\n        pyodide.runPythonAsync(`\n            import micropip\n            await micropip.install('selfies==${selfiesVersion}')\n            from selfies import encoder, decoder\n        `, (err) => {\n            selfiesMod.pyodideLoaded = 'failed';\n            selfiesMod.selfiesLoaded = 'failed';\n        }).then(() => {\n            selfiesMod.selfiesLoaded = 'loaded'\n            const decoder = pyodide.globals.get('decoder');\n            selfiesMod.decoder = (selfies) => {\n                try {\n                    let result = decoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n            const encoder = pyodide.globals.get('encoder');\n            selfiesMod.encoder = (selfies) => {\n                try {\n                    let result = encoder(selfies);\n                    return result;\n                } catch (e) {\n                    console.log(e);\n                    return null;\n                }\n            };\n            console.log('Loaded selfies')\n        });\n    }, (err) => {\n        selfiesMod.selfiesLoaded = 'failed';\n    })\n});\n"],"names":["importScripts","selfiesMod","decoder","s","encoder","pyodideLoaded","selfiesLoaded","onmessage","e","data","mtype","mid","result","pyodide","selfies","postMessage","console","log","loadPyodide","indexURL","then","pyodide1","loadPackage","runPythonAsync","concat","err","globals","get"],"version":3,"file":"selfies_worker.8cc9907f.js.map"}